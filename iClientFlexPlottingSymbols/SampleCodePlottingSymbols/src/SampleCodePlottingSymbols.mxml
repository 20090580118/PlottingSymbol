<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ic="http://www.supermap.com/iclient/2010"
			   width="100%" height="100%"
			   creationComplete="application1_creationCompleteHandler(event)">
	<fx:Declarations>
		<s:Resize id="expand" target="{_titleWindow}" widthTo="900"/>
		<s:Button id="btn" cornerRadius="10" width="40" height="40" label="hi"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[	
			import com.supermap.web.actions.DrawAction;
			import com.supermap.web.actions.Pan;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.Point2D;
			import com.supermap.web.core.Rectangle2D;
			import com.supermap.web.core.geometry.GeoLine;
			import com.supermap.web.core.styles.PredefinedFillStyle;
			import com.supermap.web.events.DrawEvent;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			import web.actions.DrawCircleEx;
			import web.actions.DrawCurveFlag;
			import web.actions.DrawDiagonalArrow;
			import web.actions.DrawDoubleArrow;
			import web.actions.DrawRectFlag;
			import web.actions.DrawStraightArrow;
			import web.actions.DrawTriangleFlag;
			import web.actions.PlottingEdit;
			
			
			private var drawCircleEx:DrawCircleEx;
			
			private var drawRectFlag:DrawRectFlag;
			private var drawTriangleFlag:DrawTriangleFlag;
			private var drawCurveFlag:DrawCurveFlag;
			
			private var drawStraightArrow:DrawStraightArrow;
			private var drawDiagonalArrow:DrawDiagonalArrow;
			private var drawDoubleArrow:DrawDoubleArrow;
			
			private var geoStyleS:String = "solid";
			
			private var edit:PlottingEdit;
			[Bindable]
			private var denoScales:Array = new Array(470000000, 235000000, 117500000, 58750000, 29375000, 14687500);
			[Bindable]
			private var _titleWindow:PreviewWindow;
			//初始化所有标绘扩展符号绘制对象
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				//绘制圆
				drawCircleEx = new DrawCircleEx(map);
				drawCircleEx.addEventListener(DrawEvent.DRAW_END,addFeature);
				//绘制直角旗标
				drawRectFlag = new DrawRectFlag(map);
				drawRectFlag.addEventListener(DrawEvent.DRAW_END,addFeature);
				//绘制三角旗标
				drawTriangleFlag = new DrawTriangleFlag(map);
				drawTriangleFlag.addEventListener(DrawEvent.DRAW_END,addFeature);
				//绘制曲线旗标
				drawCurveFlag = new DrawCurveFlag(map);
				drawCurveFlag.addEventListener(DrawEvent.DRAW_END,addFeature);
				//绘制直箭头
				drawStraightArrow = new DrawStraightArrow(map);
				drawStraightArrow.addEventListener(DrawEvent.DRAW_END,addFeature);
				//绘制斜箭头
				drawDiagonalArrow = new DrawDiagonalArrow(map);
				drawDiagonalArrow.addEventListener(DrawEvent.DRAW_END,addFeature);
				//绘制双箭头
				drawDoubleArrow = new DrawDoubleArrow(map);
				drawDoubleArrow.addEventListener(DrawEvent.DRAW_END,addFeature);
				
				
				edit = new PlottingEdit(map,fl);
			}
			
			//矢量要素绘制完毕事件 DrawEvent.DRAW_END 的侦听函数
			private function addFeature(event:DrawEvent):void
			{
				fl.addFeature(event.feature);
			}
			protected function textLabel_clickHandler2(event:MouseEvent):void
			{
				var urlReq:URLRequest = new URLRequest("https://github.com/SuperMap/PlottingSymbol");				
				navigateToURL(urlReq, "_blank");
			}
			//超链接
			protected function textLabel_clickHandler(event:MouseEvent):void
			{
				var urlReq:URLRequest = new URLRequest("http://www.supermap.com.cn/");				
				navigateToURL(urlReq, "_blank");
			}
			//标绘扩展符号绘制
			protected function B_drawState_clickHandler(event:MouseEvent):void
			{
				var button:Button = event.target as Button;
				var id:String = button.id;
				var polygonStyle:PredefinedFillStyle = new PredefinedFillStyle(this.geoStyleS,4354775,1);
				if(id == "B_drawCircleEx")
				{
					drawCircleEx.style = polygonStyle;
					
					map.action = drawCircleEx;
				}
				if(id == "B_drawRectFlag")
				{
					drawRectFlag.style = polygonStyle;
					map.action = drawRectFlag;
				}
				if(id == "B_drawTriangleFlag")
				{
					drawTriangleFlag.style = polygonStyle;
					map.action = drawTriangleFlag;
				}
				if(id == "B_drawCurveFlag")
				{
					drawCurveFlag.style = polygonStyle;
					map.action = drawCurveFlag;
				}
				if(id == "B_drawStraightArrow")
				{
					drawStraightArrow.style = polygonStyle;
					map.action = drawStraightArrow;
				}
				if(id == "B_drawDiagonalArrow")
				{
					drawDiagonalArrow.style = polygonStyle;
					map.action = drawDiagonalArrow;
				}
				if(id == "B_drawDoubleArrow")
				{
					drawDoubleArrow.style = polygonStyle;
					map.action = drawDoubleArrow;
				}
			}
			
			
			//几何对象style修改
			protected function geoStyle_changeHandler(event:IndexChangeEvent):void
			{
				this.geoStyleS = geoStyle.selectedItem.id.toLowerCase();
				var polygonStyle:PredefinedFillStyle = new PredefinedFillStyle(this.geoStyleS);
				//如果正处于绘制，则修改style
				if(map.action is DrawAction)
				{
					(map.action as DrawAction).style = polygonStyle;
				}
				
				
			}
			//编辑
			protected function B_edit_clickHandler(event:MouseEvent):void
			{
				map.action = edit;
			}
			//平移
			protected function B_pan_clickHandler(event:MouseEvent):void
			{
				map.action = new Pan(map);
			}
			//清除
			protected function B_clear_clickHandler(event:MouseEvent):void
			{
				fl.clear();
			}
			
			protected function B_print_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var printWindow:PrintWindow = new PrintWindow;
				printWindow.addEventListener("AddPreView",addPreViewHandler);
				printWindow.map = this.map;
				printWindow.printBonds =  new Rectangle2D(-20037508.3427892, -20037508.3427892, 20037508.3427892, 20037508.3427892);
				printWindow.layerIds = ["worldMap"];
				printWindow.top = 5;
				printWindow.bottom = 5;
				
				_titleWindow = null;
				_titleWindow = new PreviewWindow;
				_titleWindow.x = 100;
				_titleWindow.y = 100;
				_titleWindow.maxWidth = 1000;
				_titleWindow.width = 255;
				_titleWindow.height = 500;
				PopUpManager.addPopUp(_titleWindow, this, false);  
				_titleWindow.vgp.addElement(printWindow);
			}
			//_titleWindow展开动画
			private function addPreViewHandler(event:Event):void
			{
				expand.end();
				expand.play();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<!--添加 云 地图-->
	<ic:Map id="map" horizontalCenter="0" bottom="0" top="0" scales="{this.denoScales}">
		<ic:CloudLayer id="worldMap" /> 
		<ic:FeaturesLayer id="fl"/>
	</ic:Map>
	<!---->
	<s:Label paddingRight="5" paddingBottom="5" click="textLabel_clickHandler2(event)" 
			 text="GitHub" right="30" bottom="15" buttonMode="true"  
			 color="blue" textDecoration="underline" />
	<s:Label paddingRight="5" paddingBottom="5" click="textLabel_clickHandler(event)" 
			 text="SuperMap" right="30" bottom="0" buttonMode="true"  
			 color="blue" textDecoration="underline" />
	<!--工具箱-->
	<s:controlBarLayout>
		<s:BasicLayout/>
	</s:controlBarLayout>
	<s:controlBarContent>
		<s:HGroup gap="5" paddingRight="5" paddingTop="5" paddingBottom="5" horizontalCenter="0" verticalCenter="0">
			<s:Button id="B_drawCircleEx" skinClass="skins.drawCircleSkin" label="画圆" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_drawRectFlag" skinClass="skins.drawRectFlagSkin" label="直角旗标" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_drawTriangleFlag" skinClass="skins.drawTriangleFlagSkin" label="三角旗标" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_drawCurveFlag" skinClass="skins.drawCurveFlagSkin" label="曲线旗标" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_drawStraightArrow" skinClass="skins.drawStraightArrowSkin" label="直箭头" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_drawDiagonalArrow" skinClass="skins.drawDiagonalArrowSkin" label="斜箭头" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_drawDoubleArrow" skinClass="skins.drawDoubleArrowSkin" label="双箭头" click="B_drawState_clickHandler(event)"/>
			<s:Button id="B_edit" skinClass="skins.editEntityBtnSkin" label="标绘扩展符号编辑" click="B_edit_clickHandler(event)"/>
			<s:Button id="B_pan" skinClass="skins.panBtnSkin" label="平移" click="B_pan_clickHandler(event)"/>
			<s:Button id="B_clear" skinClass="skins.clearBtnSkin" label="清除" click="B_clear_clickHandler(event)"/>
			<s:Button id="B_print" skinClass="skins.printBtnSkin" label="打印" click="B_print_clickHandler(event)"/>
			
			
			
			<s:DropDownList id="geoStyle" toolTip="设置面填充风格" 
							x="69" y="8" change="geoStyle_changeHandler(event)"
							itemRenderer="spark.skins.spark.DefaultComplexItemRenderer" 
							skinClass="skins.CustomDropDownListSkin" selectedIndex="0"
							textAlign="center" fontSize="20" fontWeight="normal">
				<s:dataProvider>
					<s:ArrayList>
						<s:BitmapImage source="@Embed('../assets/polygonSolid.png')" id="Solid"/>
						<s:BitmapImage source="@Embed('../assets/null.png')" id="Null"/>
						<s:BitmapImage source="@Embed('../assets/horizontal.png')" id="horizontal"/>
						<s:BitmapImage source="@Embed('../assets/vertical.png')" id="vertical"/>
						<s:BitmapImage source="@Embed('../assets/cross.png')" id="cross"/>
						<s:BitmapImage source="@Embed('../assets/slash.png')" id="slash"/>
						<s:BitmapImage source="@Embed('../assets/backslash.png')" id="backslash"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</s:HGroup>
	</s:controlBarContent>
	
</s:Application>
